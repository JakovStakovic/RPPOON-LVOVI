using RPPON.LV5;
using System.Diagnostics;

namespace Program
{
    class Program
    {
        static void Main()
        {
            
            User person1 = User.GenerateUser("Jakov");
            User person2 = User.GenerateUser("Ivan");
            User person3 = User.GenerateUser("Dino");
            User person4 = User.GenerateUser("Petra");
            LoggingProxyDataset proxy6 = new LoggingProxyDataset();
            ProtectionProxyDataset proxy1 = new ProtectionProxyDataset(person1);
            ProtectionProxyDataset proxy2 = new ProtectionProxyDataset(person2);
            ProtectionProxyDataset proxy3 = new ProtectionProxyDataset(person3);
            ProtectionProxyDataset proxy4 = new ProtectionProxyDataset(person4);
            VirtualProxyDataset proxy5 = new VirtualProxyDataset("sensitiveData.csv");
            DataConsolePrinter printer = new DataConsolePrinter();
            printer.Print(proxy1);
            printer.Print(proxy5);
            printer.Print(proxy2);
            printer.Print(proxy6);
            
        }
    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RPPON.LV5
{
    public class LoggingProxyDataset : IDataset
    {
        ConsoleLogger consoleLogger = ConsoleLogger.GetInstance();
        Dataset dataset;

        public LoggingProxyDataset()
        {
        }

        public ReadOnlyCollection<List<string>> GetData()
        {
            if(this.dataset == null)
            {
                this.dataset = new Dataset("sensitiveData.csv");
            }
            consoleLogger.Log("Vrijeme pristupa: " + DateTime.Now.ToString());
            return this.dataset.GetData();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RPPON.LV5
{
    class ProtectionProxyDataset : IDataset
    {
        private Dataset dataset;
        private List<int> allowedIDs;
        public User user { private get; set; }
        public ProtectionProxyDataset(User user)
        {
            this.allowedIDs = new List<int>(new int[] { 1, 3, 5 });
            this.user = user;
        }
        private bool AuthenticateUser()
        {
            return allowedIDs.Contains(this.user.ID);
        }
        public ReadOnlyCollection<List<string>> GetData()
        {
            if (this.AuthenticateUser())
            {
                if (this.dataset == null)
                {
                    this.dataset = new Dataset("sensitiveData.csv");
                }
                return this.dataset.GetData();
            }
            return null;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RPPON.LV5
{
    class VirtualProxyDataset : IDataset
    {
        private string filePath;
        private Dataset dataset;
        public VirtualProxyDataset(string filePath)
        {
            this.filePath = filePath;
        }
        public ReadOnlyCollection<List<string>> GetData()
        {
            if (dataset == null)
            {
                dataset = new Dataset(filePath);
            }
            
            return dataset.GetData();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RPPON.LV5
{
    public class ConsoleLogger
    {
        private static ConsoleLogger instance;
        
        private ConsoleLogger()
        {
            
        }

        public static ConsoleLogger GetInstance()
        {
            if(instance == null)
            {
                instance = new ConsoleLogger();
            }
            return instance;
        }

        public void Log(string message)
        {
            Console.WriteLine(message);
        }

    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RPPON.LV5
{
   public class DataConsolePrinter
    {
        public DataConsolePrinter() { }
        public void Print(IDataset data)
        {
            ReadOnlyCollection<List<string>> Data = data.GetData();
            if (Data == null)
            {
                Console.WriteLine("Not Accessable");
                return;
            }
            foreach (List<string> places in Data)
            {
                foreach (string place in places)
                {
                    Console.Write(place + " ");
                }
                Console.WriteLine();
            }
            Console.WriteLine();
        }
    }

}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RPPON.LV5
{
    class User
    {
        private static int id = 0;
        public string Name { get; private set; }
        public int ID { get; private set; }
        private User(string name, int ID)
        {
            this.Name = name;
            this.ID = ID;
        }
        public static User GenerateUser(string name)
        {
            id++;
            return new User(name, id);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RPPON.LV5
{
    class Dataset : IDataset
    {
        private string filePath;
        private List<List<string>> data;
        public Dataset(string filePath)
        {
            this.filePath = filePath;
            this.data = new List<List<string>>();
            this.LoadDataFromCSV();
        }
        private void LoadDataFromCSV()
        {
            string[] lines = System.IO.File.ReadAllLines(this.filePath);
            foreach (string line in lines)
            {
                List<string> row = new List<string>(line.Split(','));
                data.Add(row);
            }
        }
        public ReadOnlyCollection<List<string>> GetData()
        {
            return new ReadOnlyCollection<List<string>>(this.data);
        }
    }

}
